{"ast":null,"code":"var _jsxFileName = \"/Users/antarabhunia/Desktop/react-udemy/src/App.js\";\nimport React, { Component } from 'react'; //import React, {useState} from 'react';\n//import logo from './logo.svg';\n\nimport classes from './App.css'; //import styled from 'styled-components';\n//import Radium, {StyleRoot} from 'radium';\n\nimport Person from './Person/Person'; // P should be uppercase always \n//import { render } from '@testing-library/react';\n\nimport Validation from './Validation/Validation';\nimport Char from './Char/Char';\nimport UserInput from './UserInput/UserInput';\nimport UserOutput from './UserOutput/UserOutput'; //import { render } from '@testing-library/react';\n// Assigment 2\n\n/*\nclass App extends Component {\n  state ={\n\n    userInput: ''\n  }\n\n  iputChangeHandler=(event) => {\n    this.setState({userInput: event.target.value});\n\n  }\n deleteCharHandler =(index) =>{\n  const text = this.state.userInput.split('');\n\n  text.splice(index,1);\n  const updatedText= text.join('');\n  this.setState({userInput: updatedText});\n }\n\n\n render(){\n\n  let charList =this.state.userInput.split('').map((ch,index) =>{\n   return <Char character= {ch} key ={index}\n   clicked={() => this.deleteCharHandler(index)} />\n\n  });\n\n  return (\n    <div className='App'>\n      <br></br>\n      <br></br>\n      <input type=\"text\" onChange= {this.iputChangeHandler}\n      value={this.state.userInput}/>\n      <p>{this.state.userInput}</p>\n      <Validation inputLength= {this.state.userInput.length} />\n      {charList}\n    </div>\n  );\n }\n\n}\n\n\n\nclass App extends Component {\n\n  state={\n   username: 'supermax'\n\n  }\n  \n  usernameChangeHandler=(event) =>{\n   this.setState({\n     username: event.target.value\n   });\n\n  }\n\n render(){\n   return (\n    <div className=\"App\">\n     <br></br>\n     <UserInput changed={this.usernameChangeHandler}\n     currentName={this.state.username}/>\n     <UserOutput userName={this.state.username}/>\n     <UserOutput userName={this.state.username}/>\n     <UserOutput userName=\"max\" />\n     </div>\n    );\n  }\n}\n\n*/\n\n/*\n\nconst App = props => {\n const [personsState, setPersonState] = useState ({\n  persons: [\n    { name:\"Antara\", age:30},\n    { name:\"Subhadeep\",age:35},\n    { name:\"Aniket\", age:28}\n   ],\n   //otherState: 'some other value'\n });\n\n const [otherState,setOtherState] = useState('some other state value'); // ypu can add whatever you want noumber,bollen string\n console.log(personsState,otherState);\n const switchNameHandler = () => {\n  // console.log(\"eas clicked\");\n  setPersonState({\n   persons: [\n     { name:\"Ant\", age:30},\n     { name:\"Subhadeep\",age:35},\n     { name:\"Aniket\", age:27}\n    ]\n\n  });\n };\n\n return (\n    <div className=\"App\">\n     <h1>Hi, I am a React app</h1>\n     <p>This is a react</p>\n     <button onClick={switchNameHandler}>Switch Name</button>\n\n     <Person name={personsState.persons[0].name} age={personsState.persons[0].age}/>\n     <Person name ={personsState.persons[1].name} age={personsState.persons[1].age}> My hobbies: Racing</Person> \n     <Person name={personsState.persons[2].name} age={personsState.persons[2].age} />\n    </div>\n  );\n }\n \n\n const StyledButton = styled.button`\n \n background-color:${props => props.alt ? 'red' : 'green'};\n  color: white;\n  font: inherit;\n  border: 1px solid blue;\n  padding: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background-color:${props => props.alt ? 'salmon' : 'lightgreen'};\n    color: black;\n  }\n `;\n\n*/\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: [{\n        id: \"abc\",\n        name: \"Antara\",\n        age: 30\n      }, {\n        id: \"def\",\n        name: \"Subhadeep\",\n        age: 35\n      }, {\n        id: \"ghi\",\n        name: \"Aniket\",\n        age: 28\n      }],\n      otherState: 'some other value',\n      showPerson: false\n    };\n\n    this.nameChangeHandler = (event, id) => {\n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      });\n      const person = { ...this.state.persons[personIndex]\n      };\n      person.name = event.target.value;\n      const persons = [...this.state.persons];\n      persons[personIndex] = person;\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.deletePersonHandler = personIndex => {\n      //const persons = this.state.persons.slice();\n      const persons = [...this.state.persons];\n      persons.splice(personIndex, 1);\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.togglePersonHandler = () => {\n      const doesShow = this.state.showPerson;\n      this.setState({\n        showPerson: !doesShow\n      });\n    };\n  }\n\n  render() {\n    /*\n    const style={\n    backgroundColor:\"green\",\n    color: 'white',\n    font: \"inherit\",\n    border: \"1px solid blue\",\n    padding: \"8px\",\n    cursor: 'pointer',\n    ':hover':{\n      backgroundColor:'lightgreen',\n      color: 'black'\n    }\n    \n    };\n    */\n    let persons = null;\n\n    if (this.state.showPerson === true) {\n      persons = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 8\n        }\n      }, this.state.persons.map((person, index) => {\n        return /*#__PURE__*/React.createElement(Person, {\n          click: this.deletePersonHandler.bind(this, index),\n          name: person.name,\n          age: person.age,\n          key: person.id,\n          change: event => this.nameChangeHandler(event, person.id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 19\n          }\n        });\n      }));\n      /*\n      style.backgroundColor= \"red\";\n      style[':hover']= {\n        backgroundColor:'salmon',\n        color: 'black'\n      };\n      */\n    }\n\n    let classes = [];\n\n    if (this.state.persons.length <= 2) {\n      classes.push('red'); // classes =[red]\n    }\n\n    if (this.state.persons.length <= 1) {\n      classes.push('bold'); //classes= [red,bold]\n    }\n\n    return (\n      /*#__PURE__*/\n      //<StyleRoot>\n      React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 6\n        }\n      }, \"Hi, I am a React app\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.join(' '),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 6\n        }\n      }, \"This is a react\"), /*#__PURE__*/React.createElement(\"button\", {\n        className: classes //alt={this.state.showPerson}\n        //style={style}\n        ,\n        onClick: this.togglePersonHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 6\n        }\n      }, \"Switch Name\"), persons) //</StyleRoot>\n\n    );\n  } //return React.createElement('div',{className: 'App'},React.createElement('h1',null,'Does it woked?'));\n\n\n}\n\n;\nexport default App; //export default Radium(App);\n\n/*\n<Person name={this.state.persons[0].name} age={this.state.persons[0].age}/>\n       <Person name ={this.state.persons[1].name} age={this.state.persons[1].age} \n       click = {this.switchNameHandler. bind(this,'subho')}\n       change= {this.nameChangeHandler}> My hobbies: Racing</Person> \n       <Person name={this.state.persons[2].name} age={this.state.persons[2].age} \n\n       switchNameHandler = (newName) => {\n   // console.log(\"eas clicked\");\n   this.setState({\n    persons: [\n      { name: newName, age:30},\n      { name:\"Subhadeep\",age:35},\n      { name:\"Aniket\", age:27}\n     ]\n\n   })\n  }\n\n\nnameChangeHandler = (event,id) => {\n    this.setState({\n      persons: [\n        { name: \"ant\", age:30},\n        { name:event.target.value,age:35},\n        { name:\"Aniket\", age:27}\n       ]\n  \n     })\n       */","map":{"version":3,"sources":["/Users/antarabhunia/Desktop/react-udemy/src/App.js"],"names":["React","Component","classes","Person","Validation","Char","UserInput","UserOutput","App","state","persons","id","name","age","otherState","showPerson","nameChangeHandler","event","personIndex","findIndex","p","person","target","value","setState","deletePersonHandler","splice","togglePersonHandler","doesShow","render","map","index","bind","length","push","join"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n//import React, {useState} from 'react';\n//import logo from './logo.svg';\nimport classes from './App.css';\n//import styled from 'styled-components';\n//import Radium, {StyleRoot} from 'radium';\nimport Person from './Person/Person';  // P should be uppercase always \n//import { render } from '@testing-library/react';\nimport Validation from './Validation/Validation';\nimport Char from './Char/Char';\nimport UserInput from './UserInput/UserInput';\nimport UserOutput from './UserOutput/UserOutput';\n//import { render } from '@testing-library/react';\n// Assigment 2\n/*\nclass App extends Component {\n  state ={\n\n    userInput: ''\n  }\n\n  iputChangeHandler=(event) => {\n    this.setState({userInput: event.target.value});\n\n  }\n deleteCharHandler =(index) =>{\n  const text = this.state.userInput.split('');\n\n  text.splice(index,1);\n  const updatedText= text.join('');\n  this.setState({userInput: updatedText});\n }\n\n\n render(){\n\n  let charList =this.state.userInput.split('').map((ch,index) =>{\n   return <Char character= {ch} key ={index}\n   clicked={() => this.deleteCharHandler(index)} />\n\n  });\n\n  return (\n    <div className='App'>\n      <br></br>\n      <br></br>\n      <input type=\"text\" onChange= {this.iputChangeHandler}\n      value={this.state.userInput}/>\n      <p>{this.state.userInput}</p>\n      <Validation inputLength= {this.state.userInput.length} />\n      {charList}\n    </div>\n  );\n }\n\n}\n\n\n\nclass App extends Component {\n\n  state={\n   username: 'supermax'\n\n  }\n  \n  usernameChangeHandler=(event) =>{\n   this.setState({\n     username: event.target.value\n   });\n\n  }\n\n render(){\n   return (\n    <div className=\"App\">\n     <br></br>\n     <UserInput changed={this.usernameChangeHandler}\n     currentName={this.state.username}/>\n     <UserOutput userName={this.state.username}/>\n     <UserOutput userName={this.state.username}/>\n     <UserOutput userName=\"max\" />\n     </div>\n    );\n  }\n}\n\n*/\n\n\n\n/*\n\nconst App = props => {\n const [personsState, setPersonState] = useState ({\n  persons: [\n    { name:\"Antara\", age:30},\n    { name:\"Subhadeep\",age:35},\n    { name:\"Aniket\", age:28}\n   ],\n   //otherState: 'some other value'\n });\n\n const [otherState,setOtherState] = useState('some other state value'); // ypu can add whatever you want noumber,bollen string\n console.log(personsState,otherState);\n const switchNameHandler = () => {\n  // console.log(\"eas clicked\");\n  setPersonState({\n   persons: [\n     { name:\"Ant\", age:30},\n     { name:\"Subhadeep\",age:35},\n     { name:\"Aniket\", age:27}\n    ]\n\n  });\n };\n\n return (\n    <div className=\"App\">\n     <h1>Hi, I am a React app</h1>\n     <p>This is a react</p>\n     <button onClick={switchNameHandler}>Switch Name</button>\n\n     <Person name={personsState.persons[0].name} age={personsState.persons[0].age}/>\n     <Person name ={personsState.persons[1].name} age={personsState.persons[1].age}> My hobbies: Racing</Person> \n     <Person name={personsState.persons[2].name} age={personsState.persons[2].age} />\n    </div>\n  );\n }\n \n\n const StyledButton = styled.button`\n \n background-color:${props => props.alt ? 'red' : 'green'};\n  color: white;\n  font: inherit;\n  border: 1px solid blue;\n  padding: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background-color:${props => props.alt ? 'salmon' : 'lightgreen'};\n    color: black;\n  }\n `;\n\n*/\n\n\nclass App extends Component {\n \n  state={\n     persons: [\n      { id: \"abc\", name:\"Antara\", age:30},\n      { id: \"def\", name:\"Subhadeep\",age:35},\n      { id: \"ghi\", name:\"Aniket\", age:28}\n     ],\n     otherState: 'some other value',\n     showPerson: false\n\n  }\n  \n  nameChangeHandler = (event,id) => {\n\n   const personIndex = this.state.persons.findIndex(p =>{\n\n    return p.id === id;\n   });\n\n   const person ={\n\n    ...this.state.persons[personIndex]\n   };\n    \n   person.name= event.target.value;\n\n   const persons =[...this.state.persons];\n   persons[personIndex] = person;\n\n    this.setState({persons: persons})\n  }\n\n   deletePersonHandler =(personIndex) => {\n     //const persons = this.state.persons.slice();\n    const persons = [...this.state.persons];\n     persons.splice(personIndex,1);\n     this.setState({persons: persons});\n\n   }\n\n  togglePersonHandler =() => {\n   const doesShow= this.state.showPerson;\n    this.setState({showPerson: !doesShow});\n\n  }\n\n\nrender(){\n  /*\n const style={\n  backgroundColor:\"green\",\n  color: 'white',\n  font: \"inherit\",\n  border: \"1px solid blue\",\n  padding: \"8px\",\n  cursor: 'pointer',\n  ':hover':{\n    backgroundColor:'lightgreen',\n    color: 'black'\n  }\n  \n };\n */\n let persons=null;\n\n if(this.state.showPerson === true ){\n\n  persons = (\n\n       <div>\n         {this.state.persons.map((person,index) => {\n           return <Person \n           click={this.deletePersonHandler.bind(this,index)}\n           name={person.name}\n            age={person.age} \n            key={person.id}\n            change={(event) =>this.nameChangeHandler(event,person.id)} />\n         })}\n       \n    </div> \n  );\n  /*\n  style.backgroundColor= \"red\";\n  style[':hover']= {\n    backgroundColor:'salmon',\n    color: 'black'\n  };\n  */\n }\n\n let classes =[];\n\n if(this.state.persons.length <=2){\n   classes.push('red'); // classes =[red]\n }\n\nif(this.state.persons.length <=1) {\n  classes.push('bold'); //classes= [red,bold]\n}\n\n\n\n\n\n\n\n  return (\n    //<StyleRoot>\n    <div className=\"App\">\n     <h1>Hi, I am a React app</h1>\n     <p className={classes.join(' ')}>This is a react</p>\n     < button className={classes}\n     \n     //alt={this.state.showPerson}\n     //style={style}\n     onClick={ this.togglePersonHandler}>Switch Name\n     </button>\n\n     {persons}\n       \n        \n    </div>\n    //</StyleRoot>\n  );\n   } //return React.createElement('div',{className: 'App'},React.createElement('h1',null,'Does it woked?'));\n  };\n      \n  export default App ;\n\n    //export default Radium(App);\n/*\n<Person name={this.state.persons[0].name} age={this.state.persons[0].age}/>\n       <Person name ={this.state.persons[1].name} age={this.state.persons[1].age} \n       click = {this.switchNameHandler. bind(this,'subho')}\n       change= {this.nameChangeHandler}> My hobbies: Racing</Person> \n       <Person name={this.state.persons[2].name} age={this.state.persons[2].age} \n\n       switchNameHandler = (newName) => {\n   // console.log(\"eas clicked\");\n   this.setState({\n    persons: [\n      { name: newName, age:30},\n      { name:\"Subhadeep\",age:35},\n      { name:\"Aniket\", age:27}\n     ]\n\n   })\n  }\n\n\nnameChangeHandler = (event,id) => {\n    this.setState({\n      persons: [\n        { name: \"ant\", age:30},\n        { name:event.target.value,age:35},\n        { name:\"Aniket\", age:27}\n       ]\n  \n     })\n       */"]},"metadata":{},"sourceType":"module"}